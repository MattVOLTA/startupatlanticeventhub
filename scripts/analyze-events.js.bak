import 'dotenv/config';
import { createClient } from '@supabase/supabase-js';
import OpenAI from 'openai';
import fs from 'fs';
import path from 'path';

const SUPABASE_URL = process.env.VITE_SUPABASE_URL;
const SUPABASE_ANON_KEY = process.env.VITE_SUPABASE_ANON_KEY;
const OPENAI_API_KEY = process.env.VITE_OPENAI_API_KEY;

if (!SUPABASE_URL || !SUPABASE_ANON_KEY || !OPENAI_API_KEY) {
  console.error('Missing required environment variables');
  process.exit(1);
}

// Test mode configuration
const TEST_MODE = {
  // Check if we're in test mode
  enabled: !!process.env.EVENT_LIMIT || !!process.env.TEST_ORGANIZER_ID || !!process.env.MOCK_OPENAI,
  
  // Maximum number of events to process
  eventLimit: process.env.EVENT_LIMIT ? parseInt(process.env.EVENT_LIMIT, 10) : undefined,
  
  // Specific organizer to test with
  testOrganizerId: process.env.TEST_ORGANIZER_ID,
  
  // Whether to mock OpenAI calls
  mockOpenAI: !!process.env.MOCK_OPENAI
};

if (TEST_MODE.enabled) {
  console.log('ðŸ§ª Running in TEST MODE with the following settings:');
  if (TEST_MODE.eventLimit) console.log(`- Event limit: ${TEST_MODE.eventLimit}`);
  if (TEST_MODE.testOrganizerId) console.log(`- Test organizer ID: ${TEST_MODE.testOrganizerId}`);
  if (TEST_MODE.mockOpenAI) console.log(`- Mock OpenAI: ${TEST_MODE.mockOpenAI}`);
}

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
const openai = new OpenAI({ apiKey: OPENAI_API_KEY });

// Path for storing the timestamp of the last analysis run
const LAST_RUN_FILE = path.join(process.cwd(), '.last_analysis_run');

// Function to get the timestamp of the last analysis run
function getLastRunTimestamp() {
  try {
    if (fs.existsSync(LAST_RUN_FILE)) {
      const timestamp = fs.readFileSync(LAST_RUN_FILE, 'utf8');
      return new Date(timestamp);
    }
  } catch (error) {
    console.warn('Could not read last run timestamp:', error);
  }
  
  // If no timestamp is found or there's an error, return a date from 30 days ago
  const defaultDate = new Date();
  defaultDate.setDate(defaultDate.getDate() - 30);
  return defaultDate;
}

// Function to save the current timestamp as the last analysis run
function saveLastRunTimestamp() {
  try {
    const now = new Date();
    fs.writeFileSync(LAST_RUN_FILE, now.toISOString());
  } catch (error) {
    console.error('Could not save last run timestamp:', error);
  }
}

async function getInterests() {
  const { data: interests, error } = await supabase
    .from('interests')
    .select('id, name, description')
    .order('name');

  if (error) throw error;
  return interests;
}

async function getNewOrUpdatedEvents(lastRunTimestamp) {
  console.log(`Looking for events updated after ${lastRunTimestamp.toISOString()}`);
  
  // Build query with potential test mode restrictions
  let query = supabase
    .from('events')
    .select('id, name, description, detailed_summary, organization_id')
    .or(`created_at.gt.${lastRunTimestamp.toISOString()},updated_at.gt.${lastRunTimestamp.toISOString()}`);
  
  // Add test mode filters if enabled
  if (TEST_MODE.enabled) {
    // If testing a specific organizer
    if (TEST_MODE.testOrganizerId) {
      // First we need to get the organization UUID that corresponds to the Eventbrite ID
      const { data: org } = await supabase
        .from('organizations')
        .select('id')
        .eq('eventbrite_id', TEST_MODE.testOrganizerId)
        .limit(1);
      
      if (org && org.length > 0) {
        console.log(`Filtering to only events from organization with ID: ${org[0].id}`);
        query = query.eq('organization_id', org[0].id);
      }
    }
    
    // Limit the number of events if specified
    if (TEST_MODE.eventLimit) {
      query = query.limit(TEST_MODE.eventLimit);
    }
  }
  
  // Execute the query
  const { data: events, error } = await query;

  if (error) throw error;
  console.log(`Found ${events?.length || 0} new or updated events`);
  return events || [];
}

// New function to find and remove cancelled events
async function removeDeletedOrCancelledEvents() {
  // First, get all events in our database with their organization IDs
  const { data: dbEvents, error: dbError } = await supabase
    .from('events')
    .select('id, organization_id')
    .gte('end_date', new Date().toISOString()); // Only consider future and current events
  
  if (dbError) {
    console.error('Error fetching events from database:', dbError);
    return;
  }
  
  if (!dbEvents || dbEvents.length === 0) {
    console.log('No future events in the database to check');
    return;
  }
  
  console.log(`Checking ${dbEvents.length} future events to find cancelled ones...`);
  
  // Group events by organization to minimize API calls
  const eventsByOrg = dbEvents.reduce((acc, event) => {
    if (!event.organization_id) return acc;
    if (!acc[event.organization_id]) acc[event.organization_id] = [];
    acc[event.organization_id].push(event.id);
    return acc;
  }, {});
  
  // Get list of organizations
  const { data: organizations, error: orgError } = await supabase
    .from('organizations')
    .select('id, eventbrite_id');
  
  if (orgError) {
    console.error('Error fetching organizations:', orgError);
    return;
  }
  
  // Create a map of organization UUID to Eventbrite ID
  const orgIdToEventbriteId = {};
  for (const org of organizations) {
    orgIdToEventbriteId[org.id] = org.eventbrite_id;
  }
  
  // For each organization, fetch their events from Eventbrite and compare
  let cancelledEventsCount = 0;
  for (const [orgId, eventIds] of Object.entries(eventsByOrg)) {
    const eventbriteId = orgIdToEventbriteId[orgId];
    if (!eventbriteId) continue;
    
    try {
      // We'll check for events with status 'canceled', 'draft', or missing altogether
      const liveEventIds = await getEventbriteEventIds(eventbriteId);
      
      // Find which events in our DB are no longer in Eventbrite's list of live events
      const cancelledEvents = eventIds.filter(id => !liveEventIds.includes(id));
      
      if (cancelledEvents.length > 0) {
        console.log(`Found ${cancelledEvents.length} cancelled/removed events for organization ${orgId}`);
        
        // Remove these events from our database
        const { error: deleteError } = await supabase
          .from('events')
          .delete()
          .in('id', cancelledEvents);
        
        if (deleteError) {
          console.error('Error deleting cancelled events:', deleteError);
        } else {
          cancelledEventsCount += cancelledEvents.length;
          console.log(`Successfully removed ${cancelledEvents.length} cancelled events`);
        }
      }
    } catch (error) {
      console.error(`Error checking events for organization ${orgId}:`, error);
    }
  }
  
  console.log(`Total cancelled events removed: ${cancelledEventsCount}`);
}

// Helper function to get event IDs from Eventbrite for a specific organizer
async function getEventbriteEventIds(organizerId) {
  const now = new Date();
  
  const params = new URLSearchParams({
    status: 'live,started,ended', // Only get active events
    time_filter: 'current_future'
  });
  
  try {
    // Get Eventbrite token from environment variables
    const EVENTBRITE_TOKEN = process.env.VITE_EVENTBRITE_TOKEN;
    if (!EVENTBRITE_TOKEN) {
      console.error('Missing Eventbrite token');
      return [];
    }
    
    console.log(`Fetching events for organizer ${organizerId}...`);
    const response = await fetch(
      `https://www.eventbriteapi.com/v3/organizers/${organizerId}/events/?${params}`,
      {
        headers: {
          'Authorization': `Bearer ${EVENTBRITE_TOKEN}`
        }
      }
    );
    
    if (!response.ok) {
      if (response.status === 404) {
        console.error(`Organizer ${organizerId} not found`);
        return [];
      } else if (response.status === 401) {
        console.error('Unauthorized: Check your Eventbrite token');
        return [];
      } else {
        console.error(`Error fetching events for organizer ${organizerId}: ${response.status}`);
        const errorText = await response.text();
        console.error(`Error details: ${errorText}`);
        return [];
      }
    }
    
    const data = await response.json();
    console.log(`Found ${data.events?.length || 0} live events for organizer ${organizerId}`);
    return (data.events || []).map(event => event.id);
  } catch (error) {
    console.error(`Error fetching Eventbrite events for organizer ${organizerId}:`, error);
    return [];
  }
}

async function analyzeEvent(event, interests, systemPrompt) {
  const eventContent = {
    name: event.name,
    description: event.description || '',
    detailed_summary: event.detailed_summary || ''
  };

  // If we're in mock OpenAI mode, just return a mock response
  if (TEST_MODE.mockOpenAI) {
    console.log(`[MOCK] Would have sent OpenAI request for event: ${event.name}`);
    return {
      "Fundraising & Investor Readiness": "This is a mock interest match for testing",
      "Networking & Social Events": "This is another mock interest match for testing"
    };
  }

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4.1",
      messages: [
        { 
          role: "system", 
          content: systemPrompt 
        },
        { 
          role: "user", 
          content: JSON.stringify(eventContent)
        }
      ],
      temperature: 1,
      max_tokens: 2048,
      top_p: 1,
      frequency_penalty: 0,
      presence_penalty: 0,
      response_format: { type: "json_object" }
    });

    return JSON.parse(completion.choices[0].message.content);
  } catch (error) {
    console.error(`Error analyzing event ${event.id}:`, error);
    return null;
  }
}

async function saveEventInterests(eventId, interestMatches, interests) {
  // Delete existing interests for this event
  const { error: deleteError } = await supabase
    .from('event_interests')
    .delete()
    .eq('event_id', eventId);

  if (deleteError) {
    console.error(`Error deleting existing interests for event ${eventId}:`, deleteError);
    return;
  }

  // Create interest mappings
  const interestNameToId = {};
  for (const interest of interests) {
    interestNameToId[interest.name] = interest.id;
  }

  // Prepare new interest associations
  const eventInterests = Object.keys(interestMatches)
    .filter(interestName => interestNameToId[interestName]) // Only include interests that exist in our database
    .map(interestName => ({
      event_id: eventId,
      interest_id: interestNameToId[interestName]
    }));

  if (eventInterests.length > 0) {
    const { error: insertError } = await supabase
      .from('event_interests')
      .insert(eventInterests);

    if (insertError) {
      console.error(`Error inserting interests for event ${eventId}:`, insertError);
    }
  }
}

async function main() {
  try {
    console.log('Starting event analysis process...');
    
    // First, check for and remove cancelled events
    console.log('\n=== CHECKING FOR CANCELLED EVENTS ===');
    await removeDeletedOrCancelledEvents();
    
    // Get the timestamp of the last analysis run
    console.log('\n=== ANALYZING NEW AND UPDATED EVENTS ===');
    const lastRunTimestamp = getLastRunTimestamp();
    console.log(`Last analysis run: ${lastRunTimestamp.toISOString()}`);
    
    // Get interests and create system prompt
    const interests = await getInterests();
    console.log(`Loaded ${interests.length} possible interest categories`);
    
    const systemPrompt = `You will be provided with the name, description, and summary of an event. Your task is to analyze this information and assign the most relevant interest areas from the following list. Each interest area is defined with a specific focus to ensure accurate categorization. Please include all relevant interest areas, as multiple may apply.

${interests.map(i => `${i.name}: ${i.description}`).join('\n\n')}

Return your analysis in valid JSON format with interest names as keys and brief explanations as values. Only use the exact interest names provided above as keys.`;

    // Get events that are new or have been updated since the last run
    const events = await getNewOrUpdatedEvents(lastRunTimestamp);
    
    if (events.length === 0) {
      console.log('No new or updated events to analyze');
      // Still save the timestamp even if no events were processed
      saveLastRunTimestamp();
      process.exit(0);
    }
    
    console.log(`Found ${events.length} new or updated events to analyze`);

    // Process each event
    for (const event of events) {
      console.log(`\nAnalyzing event: ${event.name}`);
      
      const analysis = await analyzeEvent(event, interests, systemPrompt);
      
      if (analysis) {
        console.log('Matched interests:', Object.keys(analysis).join(', '));
        await saveEventInterests(event.id, analysis, interests);
        console.log('âœ“ Interests saved successfully');
      }

      // Add a small delay to avoid rate limits
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    // Save the current timestamp as the last run
    saveLastRunTimestamp();

    console.log('\nAnalysis completed successfully!');
    process.exit(0);
  } catch (error) {
    console.error('Error during analysis:', error);
    process.exit(1);
  }
}

main();